1. Describe the logic of your program.
    1a) My program work by first parsing the input so that arrays can be read into shared memory, 
    I use multiple shared memory segments since this simplfies the memory management 
2. Why does your program work?
    It does not fully work, I ran into a issue with qsort where on the second iteration of exec() thte program fails 
    to access shared memory, I am not sure why this is happening because it was working fine yesterday. However merge does 
    work, and it works because the binary search finds the correct location for the element in the output array and the executing program 
    has access to that array
3. Explain the allocation and use of each shared memory segment.
    I created four shared memory segments, one for the array for q sort, two for the input arrays for merge, and one for the output array for merge
4. Are there potential race conditions (i.e., processes use and update a shared data item
concurrently) in your program and in the program specification?
    I did not see any potential race conditions
5. How do you construct an argument list that is passed from program main to
program qsort?
    Intially the values for qsort are 0 and n-1 which are converted to char*s and 
    read into the argument list, however after it has gotten through it's first iteration, the values for the left and right index follow the same process
    but are dependent on the pivot index to ensure that program acts on the correct array sections 
6. How do you construct an argument list that is passed from program main to
program merge?
    I only used the the executable name because all other information was availiable in shared memory
