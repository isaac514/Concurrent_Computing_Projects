1. Question: Draw a diagram showing the parent-child relationship if the following
program is run with command line argument 4. How many processes are created?
Explain step-by-step how these processes are created, especially who is created by whom.
void main(int argc, char **argv)
{
int i, n = atoi(argv[1]);
for (i = 1; i < n; i++)
if (fork())
break;
printf("Process %ld with parent %ld\n", getpid(),
getppid());
sleep(1);
}

//Answer 1

    parent process -  p                         p
                                              / 
                                             /   
    first iteration i = 1 - c1              c1   
                                           /  
                                          /    
    second iteration i = 2 - c2          c2   
                                        /
                                       /
    thrid iteration i = 3 - c3        c3

//This code segment creates three processes from the three iterations of the
//for loop. The tree is structured as seen above because the statement if(fork()) {break};
//forces the parent processes to break out for the loop. However this only applies to each parent process
//so each of the child processes will create other child processes so long as the loop conditions are met, 
//which creates 3 child processes.




2. Question: Draw a diagram showing the parent-child relationship if the following
program is run with command line argument 4. How many processes are created?
Explain step-by-step how these processes are created, especially who is created by whom.
void main(int argc, char **argv)
{
int i, n = atoi(argv[1]);
for (i = 0; i < n; i++)
if (fork() <= 0)
break;
printf("Process %ld with parent %ld\n", getpid(),
getppid());
sleep(1);
}

//Answer 2

parent process -  p                    p 
                                    / / \ \
                                   / |   | \
                                  /  |   |  \
                                 c1  c2  c3  c4

//The fork tree is structured as seen above. The reason why this is the case is because
//the loop will iterate 4 times producing 4 child processes. The structure comes from the 
//statement if(fork() <= 0) {break}; This ensures that each child process will break out of 
//the for loop ensuring that the only process that can create child processes is the intial 
//parent process. First the parent process creates c1 the first child (i=1). Second the parent 
//process creates c2 the second child (i=2). Thrid the parent process creates c3 the third child (i=3).
//Lastly the parent process creates c4 the fourth child (i=4). Once (i) equals 4 the parent process will
//not enter the loop again and there will be no processes created  


3. Question: Draw a diagram showing the parent-child relationship if the following
program is run with command line argument 3. How many processes are created?
Explain step-by-step how these processes are created, especially who is created by whom.
void main(int argc, char **argv)
{
int i, n = atoi(argv[1]);
for (i = 0; i < n; i++)
if (fork() == -1)
break;
printf("Process %ld with parent %ld\n", getpid(),
getppid());
sleep(1);
}
parent process -  p                    p 
                                      / \ 
                                     /   \ 
                                    /     \ 
                                   c1     c3 
                                  / \       \ 
                                 /   \       \ 
                                /     \       \ 
                               c2     c5      c6
                              /  
                             /    
                            /
                           c4      
//Answer 3
//The fork tree is structured as seen above. The program exexutes the for loop 3 times. The statement (if fork() == -1 ) {break};
//ensures that if the fork call fails for some reason we will break out of the loop. Other while child processes will be created in the following manner.
//First the loop iterates creating the first child (c1) of the main proccess p. Second the loop does it's second iteration, the fork call here is 
//applied to both the parent and child processes creating c2 and c3. Finally the loop executes on last time creating three more children c4 , c5 and c6 and 
//the loop execution finishes

